class Solution {
/*
94.二叉树的中序遍历
给定一个二叉树的根节点 root ，返回 它的 中序 遍历 。
*/
  public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    inorder(root, list);
    return list;
  }
  public void inorder(TreeNode root, List<Integer> list) {
    if(root == null) {
      return;
    }
    inorder(root.left, list);
    list.add(root.val);
    inorder(root.right, list);
  }
/*
100.相同的树
给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。
如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。
*/
  //深度优先遍历
  public boolean isSameTree(TreeNode p, TreeNode q) {
    if(p == null && q == null) {
      return true;
    }
    if(p == null || q == null || p.val != q.val) {
      return false;
    }
    return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
  }
  
  //广度优先遍历
  public boolean isSameTree(TreeNode p, TreeNode q) {
    Queue<TreeNode> queue = new LinkedList<>();
    queue.offer(p);
    queue.offer(q);
    while(!queue.isEmpty()) {
      p = queue.poll();
      q = queue.poll();
      if(p == null && q == null) {
        continue;
      }
      if(p == null || q == null || p.val != q.val) {
        return false;
      }
      queue.offer(q.left);
      queue.offer(p.left);
      queue.offer(q.right);
      queue.offer(p.right);
    }
    return true;
  }
/*
101.对称二叉树
给你一个二叉树的根节点 root ， 检查它是否轴对称。
*/
  public boolean isSymmetric(TreeNode root) {
    return check(root, root);
  }
  public boolean check(TreeNode p, TreeNode q) {
    if(p == null && q == null) {
      return true;
    }
    if(p == null || q == null || p.val != q.val) {
      return false;
    }
    return check(p.left, q.right) && check(p.right, q.left);
  }
}
